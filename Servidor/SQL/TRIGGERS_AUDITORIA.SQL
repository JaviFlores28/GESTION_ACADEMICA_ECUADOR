-- Trigger para auditar inserciones en la tabla USUARIO
DELIMITER //
CREATE TRIGGER usuario_after_insert
AFTER INSERT ON USUARIO
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_USUARIO (AUDIT_ID, USR_ID, ACCION, FECHA_MODIFICACION)
  VALUES (UUID(), NEW.USR_ID, 'INSERT', current_timestamp());
END;
//
DELIMITER ;

-- Trigger para auditar actualizaciones en la tabla USUARIO
DELIMITER //
CREATE TRIGGER usuario_after_update
AFTER UPDATE ON USUARIO
FOR EACH ROW
BEGIN
  -- Comparar los valores antiguos y nuevos para cada columna y registrar cambios
  IF NEW.USR_DNI != OLD.USR_DNI THEN
    INSERT INTO AUDITORIA_USUARIO (AUDIT_ID, USR_ID, ACCION, CAMPO_MODIFICADO, VALOR_ANTIGUO, VALOR_NUEVO, FECHA_MODIFICACION)
    VALUES (UUID(), NEW.USR_ID, 'UPDATE', 'USR_DNI', OLD.USR_DNI, NEW.USR_DNI, current_timestamp());
  END IF;
  
  IF NEW.USR_NOM != OLD.USR_NOM THEN
    INSERT INTO AUDITORIA_USUARIO (AUDIT_ID, USR_ID, ACCION, CAMPO_MODIFICADO, VALOR_ANTIGUO, VALOR_NUEVO, FECHA_MODIFICACION)
    VALUES (UUID(), NEW.USR_ID, 'UPDATE', 'USR_NOM', OLD.USR_NOM, NEW.USR_NOM, CURRENT_TIMESTAMP());
  END IF;

  -- Repite para otras columnas si es necesario
END;
//
DELIMITER ;

-- Trigger para auditar eliminaciones en la tabla USUARIO
DELIMITER //
CREATE TRIGGER usuario_after_delete
AFTER DELETE ON USUARIO
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_USUARIO (AUDIT_ID, USR_ID, ACCION, FECHA_MODIFICACION)
  VALUES (UUID(), OLD.USR_ID, 'DELETE', current_timestamp());
END;
//
DELIMITER ;

-- Crear un trigger para INSERT en la tabla USUARIO_PROFESOR
DELIMITER //
CREATE TRIGGER usuario_profesor_after_insert
AFTER INSERT ON USUARIO_PROFESOR
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_USUARIO_PROFESOR (AUDIT_ID, DTLL_PRF_ID, ACCION, FECHA_MODIFICACION)
  VALUES (UUID(), NEW.DTLL_PRF_ID, 'INSERT', current_timestamp());
END;
//
DELIMITER ;

-- Crear un trigger para UPDATE en la tabla USUARIO_PROFESOR
DELIMITER //
CREATE TRIGGER usuario_profesor_after_update
AFTER UPDATE ON USUARIO_PROFESOR
FOR EACH ROW
BEGIN
  -- Comparar los valores antiguos y nuevos para cada columna y registrar cambios
  IF NEW.PRF_FECH_INGR_INST != OLD.PRF_FECH_INGR_INST THEN
    INSERT INTO AUDITORIA_USUARIO_PROFESOR (AUDIT_ID, DTLL_PRF_ID, ACCION, CAMPO_MODIFICADO, VALOR_ANTIGUO, VALOR_NUEVO, FECHA_MODIFICACION)
    VALUES (UUID(), NEW.DTLL_PRF_ID, 'UPDATE', 'PRF_FECH_INGR_INST', OLD.PRF_FECH_INGR_INST, NEW.PRF_FECH_INGR_INST, current_timestamp());
  END IF;
  
  IF NEW.PRF_FECH_INGR_MAG != OLD.PRF_FECH_INGR_MAG THEN
    INSERT INTO AUDITORIA_USUARIO_PROFESOR (AUDIT_ID, DTLL_PRF_ID, ACCION, CAMPO_MODIFICADO, VALOR_ANTIGUO, VALOR_NUEVO, FECHA_MODIFICACION)
    VALUES (UUID(), NEW.DTLL_PRF_ID, 'UPDATE', 'PRF_FECH_INGR_MAG', OLD.PRF_FECH_INGR_MAG, NEW.PRF_FECH_INGR_MAG, current_timestamp());
  END IF;
  
  -- Repite para otras columnas si es necesario
END;
//
DELIMITER ;

-- Crear un trigger para DELETE en la tabla USUARIO_PROFESOR
DELIMITER //
CREATE TRIGGER usuario_profesor_after_delete
AFTER DELETE ON USUARIO_PROFESOR
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_USUARIO_PROFESOR (AUDIT_ID, DTLL_PRF_ID, ACCION, FECHA_MODIFICACION)
  VALUES (UUID(), OLD.DTLL_PRF_ID, 'DELETE', current_timestamp());
END;
//
DELIMITER ;

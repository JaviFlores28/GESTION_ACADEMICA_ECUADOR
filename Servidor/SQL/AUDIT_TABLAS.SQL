CREATE TABLE IF NOT EXISTS AUDIT_USUARIO (
  AUDIT_ID INT AUTO_INCREMENT PRIMARY KEY,
  AUDIT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  AUDIT_OPERATION VARCHAR(10) NOT NULL, -- Puede ser 'INSERT', 'UPDATE', 'DELETE'
  USR_ID CHAR(36),
  USR_DNI VARCHAR(10),
  USR_NOM VARCHAR(30),
  USR_NOM2 VARCHAR(30),
  USR_APE VARCHAR(30),
  USR_APE2 VARCHAR(30),
  USR_DIR VARCHAR(300),
  USR_TEL VARCHAR(10),
  USR_CEL VARCHAR(10),
  USR_EMAIL VARCHAR(100),
  USR_FECH_NAC DATE,
  USR_GEN CHAR(1),
  USUARIO VARCHAR(30),
  USR_PSWD VARCHAR(300),
  ROL_PRF TINYINT(1),
  ROL_REPR TINYINT(1),
  ROL_ADMIN TINYINT(1),
  ESTADO TINYINT(1) CHECK (ESTADO IN (0, 1))
);

CREATE TABLE IF NOT EXISTS AUDIT_USUARIO_PROFESOR (
  AUDIT_ID INT AUTO_INCREMENT PRIMARY KEY,
  AUDIT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  AUDIT_OPERATION VARCHAR(10) NOT NULL, -- Puede ser 'INSERT', 'UPDATE', 'DELETE'
  AUDIT_USR_ID CHAR(36),  -- ID del usuario que realizó la operación
  USR_ID CHAR(36),
  PRF_FECH_INGR_INST DATE,
  PRF_FECH_INGR_MAG DATE
  );


-- Estructura de tabla para la tabla ESTUDIANTE
CREATE TABLE IF NOT EXISTS AUDIT_ESTUDIANTE (
  AUDIT_ID INT AUTO_INCREMENT PRIMARY KEY,
  AUDIT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  AUDIT_OPERATION VARCHAR(10) NOT NULL, -- Puede ser 'INSERT', 'UPDATE', 'DELETE'
  AUDIT_USR_ID CHAR(36),  -- ID del usuario que realizó la operación
  EST_ID CHAR(36),
  EST_DNI VARCHAR(10),
  EST_NOM VARCHAR(100),
  EST_NOM2 VARCHAR(100),
  EST_APE VARCHAR(100),
  EST_APE2 VARCHAR(100),
  EST_FECH_NAC DATE,
  EST_GEN VARCHAR(1),
  EST_PRV VARCHAR(50),
  EST_CAN VARCHAR(50),
  EST_PARR VARCHAR(50),
  EST_DIR VARCHAR(150),
  EST_NAC VARCHAR(50),
  EST_ETN VARCHAR(50),
  EST_NAC_ETN VARCHAR(50),
  EST_COM_ETN VARCHAR(50),
  EST_COD_ELE VARCHAR(15),
  EST_NEC_ASO_DIS TINYINT(1) CHECK (EST_NEC_ASO_DIS IN (0, 1)),
  EST_NEC_NO_ASO_DIS TINYINT(1) CHECK (EST_NEC_NO_ASO_DIS IN (0, 1)),
  EST_ENF_CAT TINYINT(1) CHECK (EST_ENF_CAT IN (0, 1)),
  EST_NUM_CONA VARCHAR(10),
  EST_INTE TINYINT(1) CHECK (EST_INTE IN (0, 1)),
  EST_TV TINYINT(1) CHECK (EST_TV IN (0, 1)),
  EST_RAD TINYINT(1) CHECK (EST_RAD IN (0, 1)),
  EST_PC TINYINT(1) CHECK (EST_PC IN (0, 1)),
  EST_CEL TINYINT(1) CHECK (EST_CEL IN (0, 1)),
  REPR_ID CHAR(36),
  REL_EST_REP VARCHAR(50),
  ESTADO TINYINT(1) CHECK (ESTADO IN (0, 1))
  );

CREATE TABLE IF NOT EXISTS AUDIT_CURSO (
  AUDIT_ID INT AUTO_INCREMENT PRIMARY KEY,
  AUDIT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  AUDIT_OPERATION VARCHAR(10) NOT NULL, -- Puede ser 'INSERT', 'UPDATE', 'DELETE'
  AUDIT_USR_ID CHAR(36),  -- ID del usuario que realizó la operación
  CRS_ID CHAR(36),
  CRS_NOM VARCHAR(10),
  CRS_TIPO VARCHAR(10),
  CRS_ORDEN INT(11),
  ESTADO TINYINT(1) CHECK (ESTADO IN (0, 1))
);

CREATE TABLE IF NOT EXISTS AUDIT_AREA (
  AUDIT_ID INT AUTO_INCREMENT PRIMARY KEY,
  AUDIT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  AUDIT_OPERATION VARCHAR(10) NOT NULL, -- Puede ser 'INSERT', 'UPDATE', 'DELETE'
  AUDIT_USR_ID CHAR(36),  -- ID del usuario que realizó la operación
  AREA_ID CHAR(36),
  AREA_NOM VARCHAR(300),
  ESTADO TINYINT(1) CHECK (ESTADO IN (0, 1))
);

CREATE TABLE IF NOT EXISTS AUDIT_ASIGNATURA (
  AUDIT_ID INT AUTO_INCREMENT PRIMARY KEY,
  AUDIT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  AUDIT_OPERATION VARCHAR(10) NOT NULL, -- Puede ser 'INSERT', 'UPDATE', 'DELETE'
  AUDIT_USR_ID CHAR(36),  -- ID del usuario que realizó la operación
  ASG_ID CHAR(36),
  ASG_NOM VARCHAR(50),
  ASG_TIPO ENUM('CUALITATIVA', 'CUANTITATIVA'),
  AREA_ID CHAR(36),
  ESTADO TINYINT(1) CHECK (ESTADO IN (0, 1)),
  FOREIGN KEY (AREA_ID) REFERENCES AREA (AREA_ID)
);

CREATE TABLE IF NOT EXISTS AUDIT_ANIO_LECTIVO (
  AUDIT_ID INT AUTO_INCREMENT PRIMARY KEY,
  AUDIT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  AUDIT_OPERATION VARCHAR(10) NOT NULL, -- Puede ser 'INSERT', 'UPDATE', 'DELETE'
  AUDIT_USR_ID CHAR(36),  -- ID del usuario que realizó la operación
  AL_ID CHAR(36),
  AL_NOM VARCHAR(30),
  AL_INICIO DATE,
  AL_FIN DATE,
  AL_POR_PRD INT,
  AL_POR_EXAM INT,
  CLFN_MIN_APR FLOAT,
  CLFN_MIN_PERD FLOAT,
  PRD_NOM VARCHAR(30),
  NUM_PRD INT,
  NUM_EXAM INT,
  NUM_PRCL INT,
  NUM_SUSP INT,
  ESTADO TINYINT(1) CHECK (ESTADO IN (0, 1))
);

CREATE TABLE IF NOT EXISTS AUDIT_PARALELO (
  AUDIT_ID INT AUTO_INCREMENT PRIMARY KEY,
  AUDIT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  AUDIT_OPERATION VARCHAR(10) NOT NULL, -- Puede ser 'INSERT', 'UPDATE', 'DELETE'
  AUDIT_USR_ID CHAR(36),  -- ID del usuario que realizó la operación
  PRLL_ID CHAR(36),
  PRLL_NOM VARCHAR(100),
  ESTADO TINYINT(1) CHECK (ESTADO IN (0, 1))
);

CREATE TABLE IF NOT EXISTS AUDIT_ESTUDIANTE_CURSO (
  AUDIT_ID INT AUTO_INCREMENT PRIMARY KEY,
  AUDIT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  AUDIT_OPERATION VARCHAR(10) NOT NULL, -- Puede ser 'INSERT', 'UPDATE', 'DELETE'
  AUDIT_USR_ID CHAR(36),  -- ID del usuario que realizó la operación
  EST_CRS_ID CHAR(36),
  EST_ID CHAR(36),
  CRS_ID CHAR(36),
  ESTADO TINYINT(1) CHECK (ESTADO IN (0, 1)),
  FOREIGN KEY (EST_ID) REFERENCES ESTUDIANTE (EST_ID),
  FOREIGN KEY (CRS_ID) REFERENCES CURSO (CRS_ID)
);

CREATE TABLE IF NOT EXISTS AUDIT_ESTUDIANTE_CURSO_PARALELO (
  AUDIT_ID INT AUTO_INCREMENT PRIMARY KEY,
  AUDIT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  AUDIT_OPERATION VARCHAR(10) NOT NULL, -- Puede ser 'INSERT', 'UPDATE', 'DELETE'
  AUDIT_USR_ID CHAR(36),  -- ID del usuario que realizó la operación
  EST_CRS_PRLL_ID CHAR(36),
  EST_CRS_ID CHAR(36),
  AL_ID CHAR(36),
  PRLL_ID CHAR(36),
  PASE ENUM('Aprobado', 'Reprobado','Suspenso','En proceso','Retirado') NOT NULL,
  ESTADO TINYINT(1) CHECK (ESTADO IN (0, 1)),
  FOREIGN KEY (EST_CRS_ID) REFERENCES ESTUDIANTE_CURSO (EST_CRS_ID),
  FOREIGN KEY (AL_ID) REFERENCES ANIO_LECTIVO (AL_ID),
  FOREIGN KEY (PRLL_ID) REFERENCES PARALELO (PRLL_ID)
);

CREATE TABLE IF NOT EXISTS AUDIT_PROFESOR_ASIGNATURA_PARALELO (
  AUDIT_ID INT AUTO_INCREMENT PRIMARY KEY,
  AUDIT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  AUDIT_OPERATION VARCHAR(10) NOT NULL, -- Puede ser 'INSERT', 'UPDATE', 'DELETE'
  AUDIT_USR_ID CHAR(36),  -- ID del usuario que realizó la operación
  PRF_ASG_PRLL_ID CHAR(36),
  ASG_ID CHAR(36),
  PRF_ID CHAR(36),
  AL_ID CHAR(36),
  CRS_ID CHAR(36),
  PRLL_ID CHAR(36),
  ESTADO TINYINT(1) CHECK (ESTADO IN (0, 1)),
  FOREIGN KEY (PRF_ID) REFERENCES USUARIO(USR_ID),
  FOREIGN KEY (AL_ID) REFERENCES ANIO_LECTIVO(AL_ID),
  FOREIGN KEY (ASG_ID) REFERENCES ASIGNATURA(ASG_ID),
  FOREIGN KEY (CRS_ID) REFERENCES CURSO(CRS_ID),
  FOREIGN KEY (PRLL_ID) REFERENCES PARALELO(PRLL_ID)
);

CREATE TABLE IF NOT EXISTS AUDIT_PERIODO (
  AUDIT_ID INT AUTO_INCREMENT PRIMARY KEY,
  AUDIT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  AUDIT_OPERATION VARCHAR(10) NOT NULL, -- Puede ser 'INSERT', 'UPDATE', 'DELETE'
  AUDIT_USR_ID CHAR(36),  -- ID del usuario que realizó la operación
  PRD_ID CHAR(36),
  PRD_NOM VARCHAR(10),
  PRD_INI DATE,
  PRD_FIN DATE,
  PRD_TIPO ENUM('Normal', 'Suspenso'),
  AL_ID CHAR(36),
  ESTADO TINYINT(1) CHECK (ESTADO IN (0, 1)),
  FOREIGN KEY (AL_ID) REFERENCES ANIO_LECTIVO (AL_ID)
);

CREATE TABLE IF NOT EXISTS AUDIT_PARCIAL (
  AUDIT_ID INT AUTO_INCREMENT PRIMARY KEY,
  AUDIT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  AUDIT_OPERATION VARCHAR(10) NOT NULL, -- Puede ser 'INSERT', 'UPDATE', 'DELETE'
  AUDIT_USR_ID CHAR(36),  -- ID del usuario que realizó la operación
  PRCL_ID CHAR(36),
  PRCL_NOM VARCHAR(10),
  PRCL_INI DATE,
  PRCL_FIN DATE,
  ESTADO TINYINT(1) CHECK (ESTADO IN (0, 1)),
  PRCL_TIPO ENUM('Normal', 'Evaluativo'),
  PRD_ID CHAR(36),
  FOREIGN KEY (PRD_ID) REFERENCES PERIODO (PRD_ID)
);

CREATE TABLE IF NOT EXISTS AUDIT_CALIFICACIONES_CUANTITATIVAS (
  AUDIT_ID INT AUTO_INCREMENT PRIMARY KEY,
  AUDIT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  AUDIT_OPERATION VARCHAR(10) NOT NULL, -- Puede ser 'INSERT', 'UPDATE', 'DELETE'
  AUDIT_USR_ID CHAR(36),  -- ID del usuario que realizó la operación
  CAL_ID CHAR(36),
  PRF_ASG_PRLL_ID CHAR(36),
  EST_CRS_PRLL_ID CHAR(36),
  PRCL_ID CHAR(36),
  CALIFICACION DECIMAL(4, 2),
  FOREIGN KEY (PRF_ASG_PRLL_ID) REFERENCES PROFESOR_ASIGNATURA_PARALELO (PRF_ASG_PRLL_ID),
  FOREIGN KEY (EST_CRS_PRLL_ID) REFERENCES ESTUDIANTE_CURSO_PARALELO (EST_CRS_PRLL_ID),
  FOREIGN KEY (PRCL_ID) REFERENCES PARCIAL (PRCL_ID)
);

CREATE TABLE IF NOT EXISTS AUDIT_CALIFICACIONES_CUALITATIVAS (
  AUDIT_ID INT AUTO_INCREMENT PRIMARY KEY,
  AUDIT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  AUDIT_OPERATION VARCHAR(10) NOT NULL, -- Puede ser 'INSERT', 'UPDATE', 'DELETE'
  AUDIT_USR_ID CHAR(36),  -- ID del usuario que realizó la operación
  CAL_ID CHAR(36),
  PRF_ASG_PRLL_ID CHAR(36),
  EST_CRS_PRLL_ID CHAR(36),
  PRD_ID CHAR(36),
  CALIFICACION CHAR(1),
  ESTADO TINYINT(1) CHECK (ESTADO IN (0, 1)),
  FOREIGN KEY (PRF_ASG_PRLL_ID) REFERENCES PROFESOR_ASIGNATURA_PARALELO (PRF_ASG_PRLL_ID),
  FOREIGN KEY (EST_CRS_PRLL_ID) REFERENCES ESTUDIANTE_CURSO_PARALELO (EST_CRS_PRLL_ID),
  FOREIGN KEY (PRD_ID) REFERENCES PERIODO (PRD_ID)
);

CREATE TABLE IF NOT EXISTS AUDIT_PARAMETRO (
  AUDIT_ID INT AUTO_INCREMENT PRIMARY KEY,
  AUDIT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  AUDIT_OPERATION VARCHAR(10) NOT NULL, -- Puede ser 'INSERT', 'UPDATE', 'DELETE'
  AUDIT_USR_ID CHAR(36),  -- ID del usuario que realizó la operación
  PRMT_ID CHAR(36),
  PRMT_NOM VARCHAR(100),
  PRMT_DESCR VARCHAR(300),
  PRMT_URL_IMG VARCHAR(500),
  ESTADO TINYINT(1) CHECK (ESTADO IN (0, 1))
);

CREATE TABLE IF NOT EXISTS AUDIT_ESCALAS_REFERENCIALES_CALIFICACIONES (
  AUDIT_ID INT AUTO_INCREMENT PRIMARY KEY,
  AUDIT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  AUDIT_OPERATION VARCHAR(10) NOT NULL, -- Puede ser 'INSERT', 'UPDATE', 'DELETE'
  AUDIT_USR_ID CHAR(36),  -- ID del usuario que realizó la operación
  ESCL_ID CHAR(36),
  ESCL_ABRV CHAR(2),
  ESCL_DESCR VARCHAR(255),
  ESCL_INI DECIMAL(5, 2),
  ESCL_FIN DECIMAL(5, 2),
  ESTADO TINYINT(1) CHECK (ESTADO IN (0, 1))
);
